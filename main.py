from db_init import create_tables
from telebot import types
from repository import Repository
import telebot
import config
from datetime import datetime, timedelta

user_state = {}

create_tables()

bot = telebot.TeleBot(config.SECRET_KEY)

repo = Repository()

@bot.message_handler(commands=['start'])
def start(message):
    repo.create_user(message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    butt2 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É‚ûï')
    butt4 = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏üìÉ')
    butt5 = types.KeyboardButton('–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å‚ùì')
    keyboard.add( butt2, butt5,butt4)
    bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫‚úåÔ∏è ',reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É‚ûï')
def create_task(message):
    user_state[message.chat.id] = {'state': 'creating_task', 'task': {}}
    bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∑–∞–¥–∞—á–∏')
    bot.register_next_step_handler(message, process_name_step)
def process_name_step(message):
    name = message.text
    user_state[message.chat.id]['task']['name'] = name
    bot.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ "{name}"')
    bot.register_next_step_handler(message, process_desc_step)
def process_desc_step(message):
    desc = message.text
    user_state[message.chat.id]['task']['desc'] = desc
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏(–ø—Ä–∏–º–µ—Ä –ì–û–î-–ú–ï–°-–î–ï–ù–¨ –ß–ê–°:–ú–ò–ù)')
    bot.register_next_step_handler(message, process_dedl_step)

def process_dedl_step(message):
    dedl = message.text
    user_state[message.chat.id]['task']['dedl'] = dedl
    bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
    repo.create_task(message.chat.id, user_state[message.chat.id]['task']['name'],
                     user_state[message.chat.id]['task']['desc'], datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                     user_state[message.chat.id]['task']['dedl'])
    del user_state[message.chat.id]



@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏üìÉ')
def get_all_tasks(message,page=0):
    buttons_per_page = 5
    bot.send_message(message.chat.id, '–í–∞—à–∏ –∑–∞–¥–∞—á–∏',
                     reply_markup=generate_markup(buttons_per_page, message.chat.id, page))
def generate_markup(buttons_per_page, user_id, page=0):
    markup = types.InlineKeyboardMarkup()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset = buttons_per_page * page
    all_tasks = repo.get_tasks_by_user_id(user_id, buttons_per_page, offset)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    for task in all_tasks:
        name = task[0]  # –ò–º—è –∑–∞–¥–∞—á–∏
        markup.add(types.InlineKeyboardButton(text=f'{name}', callback_data=f'task_{name}'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation = []
    if page > 0:  # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        navigation.append(types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'page_{page - 1}'))

    if len(all_tasks) == buttons_per_page:  # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á
        navigation.append(types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'page_{page + 1}'))

    if navigation:
        markup.add(*navigation)

    return markup

@bot.message_handler(func=lambda message: message.text == '–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å‚ùì')
def function_of_bot(message):
    bot.send_message(message.chat.id,'–Ø –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É,—É–¥–∞–ª–∏—Ç—å –µ–µ. –¢–∞–∫–∂–µ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–π')


@bot.callback_query_handler(func=lambda call:True)
def handler_callback(call):
    if call.data.startswith('task'):
        print(user_state)
        print(call.from_user.id)
        print(call.message.chat.id)
        task = call.data.split('_')[1]
        other = repo.get_by_name(task)
        print(other)
        user_state[call.from_user.id] = {
             'state':'update', 'task': {'name': task}
        }
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚ùå', callback_data='delete_word'))
        markup.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ‚úÖ',callback_data='compl'))
        bot.send_message(call.message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {task}\n–û–ø–∏—Å–∞–Ω–∏–µ: {other[0][0]}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {other[0][1]}', reply_markup=markup)
    if call.data == 'delete_word':
        #user_state[call.from_user.id][''] = 'delete_word'
        repo.delete_task(user_state[call.from_user.id]['task']['name'],call.from_user.id)
        del user_state[call.message.chat.id]
        bot.send_message(call.message.chat.id,'–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
    if call.data == 'compl':
        repo.status_change(call.from_user.id,user_state[call.from_user.id]['task']['name'])
        bot.send_message(call.message.chat.id, '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
    if call.data.startswith('page_'):
        page = int(call.data.split('_')[1])
        buttons_per_page = 5
        bot.edit_message_reply_markup(call.message.chat.id,call.message.message_id,reply_markup=generate_markup(buttons_per_page,call.from_user.id,page))








bot.polling()